name: Run Cypress Tests

# Controls when the action will run
on:
  push:
    branches:
      - master   # run on master branch push
  pull_request:
    branches:
      - master   # run on pull requests targeting master branch

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Adjust as needed

    strategy:
      matrix:
        browser: [chrome]  # Run tests in Chrome

    steps:
    # Step 1: Start Ubuntu and Install Dependencies
    - name: Set up Ubuntu environment
      run: sudo apt-get update && sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev build-essential xvfb

    # Step 2: Install Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # Specify the version of Node.js

    # Step 3: Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history to avoid shallow clone issues
        submodules: true  # If you use submodules, this will ensure they are fetched
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    
    # Step 4: Debug the current working directory and list files
    - name: Show Current Directory and Files
      run: |
        pwd     # Show the current working directory
        ls -la  # List all files to check for missing ones

    # Step 5: Install project dependencies
    - name: Install Dependencies
      run: |
        npm install

    # Step 6: Cache Cypress binary
    - name: Cache Cypress binary
      uses: actions/cache@v3
      with:
        path: ~/.cache/Cypress
        key: ${{ runner.os }}-cypress-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-cypress-

    # Step 7: Cache Node.js modules
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Step 8: Install Cypress dependencies
    - name: Install Cypress dependencies
      run: |
        sudo apt-get install -y libnss3 libgconf-2-4
        sudo apt-get install -y google-chrome-stable
        npm install cypress
        npm install --save-dev cypress-mochawesome-reporter

    # Step 9: Set Cypress executable permissions
    - name: Set Cypress executable permissions
      run: |
        chmod +x ./node_modules/.bin/cypress

    # Step 10: Run Cypress Tests
    - name: Run Cypress Tests on ${{ matrix.browser }}
      run: |
        npx cypress install  # Ensure Cypress binary is installed
        npx cypress run --browser ${{ matrix.browser }}

    # Step 11: Upload Cypress HTML Reports
    - name: Upload Cypress HTML Reports
      uses: actions/upload-artifact@v3
      with:
        name: cypress-html-reports
        path: cypress/reports/*.html

    # Step 12: Upload Cypress Screenshots and Videos
    - name: Upload Cypress Screenshots and Videos
      uses: actions/upload-artifact@v3
      with:
        name: cypress-artifacts
        path: cypress/screenshots,cypress/videos

    # Step 13: Deploy Cypress HTML Reports to GitHub Pages
    - name: Publish to GitHub Packages Apache Maven
      run: npm publish $GITHUB_WORKSPACE/cypress/reports/*.html
      env:
        GITHUB_TOKEN: ${{ github.token }}